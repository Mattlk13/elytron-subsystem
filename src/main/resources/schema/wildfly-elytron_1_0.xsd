<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ JBoss, Home of Professional Open Source.
  ~ Copyright 2014 Red Hat, Inc., and individual contributors
  ~ as indicated by the @author tags.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
            targetNamespace="urn:wildfly:elytron:1.0"
            xmlns="urn:wildfly:elytron:1.0"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified"
            version="1.0">

    <!-- The subsystem root element -->
    <xs:element name="subsystem" type="subsystemType"/>

    <xs:complexType name="subsystemType">
        <xs:sequence>
            <xs:element name="security-properties" type="securityPropertiesType" minOccurs="0" />
            <xs:element name="provider-loaders" type="providerLoadersType" minOccurs="0" />
            <xs:element name="domains" type="domainsType" minOccurs="0" />
            <xs:element name="realms" type="realmsType" minOccurs="0" />
            <xs:element name="tls" type="tlsType" minOccurs="0" />
        </xs:sequence>
    </xs:complexType>

    <!-- 
        Security Properties
     -->

    <xs:complexType name="securityPropertiesType">
        <xs:annotation>
            <xs:documentation>
                Type to contain a list of security properties to be set.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="security-property" type="propertyType" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="propertyType">
        <xs:annotation>
            <xs:documentation>
                Representation of a key/value property
                pair.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="key" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    The key for this property.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="value" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    The value for this property.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <!--
        Providers
     -->

     <xs:complexType name="providerLoadersType">
         <xs:annotation>
             <xs:documentation>
                 Container for definitions of java.security.Provider loaders.
             </xs:documentation>
         </xs:annotation>
         <xs:sequence>
             <xs:element name="provider-loader">
                 <xs:annotation>
                     <xs:documentation>
                         An individual provider loader definitions.
                     </xs:documentation>
                 </xs:annotation>
                 <xs:complexType>
                     <xs:sequence>
                         <xs:element name="provider" minOccurs="0" maxOccurs="unbounded">
                             <xs:complexType>
                                 <xs:choice minOccurs="0">
                                     <xs:element name="configuration-file">
                                         <xs:complexType>
                                                 <!-- TODO Put this pair of attributes in a common type or attribute group. -->
                                                 <xs:attribute name="relative-to" type="xs:string" use="optional">
                                                     <xs:annotation>
                                                         <xs:documentation>
                                                             A reference to a previously defined path that the file name is
                                                             relative to.
                                                         </xs:documentation>
                                                     </xs:annotation>
                                                 </xs:attribute>
                                                 <xs:attribute name="path" type="xs:string" use="required">
                                                     <xs:annotation>
                                                         <xs:documentation>
                                                             The remaining path to the file referenced.
                                                         </xs:documentation>
                                                     </xs:annotation>
                                                 </xs:attribute>
                                         </xs:complexType>
                                     </xs:element>
                                     <xs:element name="configuration-properties">
                                         <xs:annotation>
                                             <xs:documentation>
                                                 An ordered list of properties to be used to configure all of the providers.
                                             </xs:documentation>
                                         </xs:annotation>
                                         <xs:complexType>
                                             <xs:sequence>
                                                 <xs:element name="property" type="propertyType" />
                                             </xs:sequence>
                                         </xs:complexType>
                                     </xs:element>
                                 </xs:choice>
                                 <xs:attribute name="module" type="xs:string" use="optional">
                                     <xs:annotation>
                                         <xs:documentation>
                                             The name of the module to use to load the providers.

                                             If this is not specified the ClassLoader used to load the service will be used instead.
                                         </xs:documentation>
                                     </xs:annotation>
                                 </xs:attribute>
                                 <xs:attribute name="slot" type="xs:string" use="optional">
                                     <xs:annotation>
                                         <xs:documentation>
                                             The slot of the module to use to load the providers.

                                             This will only be required in rare situations where a single module is defined with multiple slots.
                                         </xs:documentation>
                                     </xs:annotation>
                                 </xs:attribute>
                                 <xs:attribute name="load-services" type="xs:boolean" default="false">
                                     <xs:annotation>
                                         <xs:documentation>
                                             Should ServiceLoader discovery be used to identify the providers?
                                             
                                             Note: ServiceLoader discovery happens before any specified classes are loaded.
                                         </xs:documentation>
                                     </xs:annotation>
                                 </xs:attribute>
                                 <xs:attribute name="class-names" type="stringListType" use="optional">
                                     <xs:annotation>
                                         <xs:documentation>
                                             The fully qualified class names of the providers to load.

                                             These providers are loaded after ServiceLoader based discovery, duplicates are silently skipped.
                                         </xs:documentation>
                                     </xs:annotation>
                                 </xs:attribute>
                             </xs:complexType>
                         </xs:element>
                     </xs:sequence>
                     <xs:attribute name="name" type="xs:string" use="required">
                         <xs:annotation>
                             <xs:documentation>
                                 The name to use to represent this provider loader in the management model. 
                             </xs:documentation>
                         </xs:annotation>
                     </xs:attribute>
                     <xs:attribute name="register" type="xs:boolean" default="false">
                         <xs:annotation>
                             <xs:documentation>
                                 Should the providers defined here be globally registered.

                                 If not registered globally security definitions within the subsystem can still use a provider by
                                 referencing it's name as defined here.
                             </xs:documentation>
                         </xs:annotation>
                     </xs:attribute>
                 </xs:complexType>
             </xs:element>
         
         </xs:sequence>
     </xs:complexType>
    <!-- 
        Domains and Realms
     -->
    
    <xs:complexType name="domainsType">
        <xs:annotation>
            <xs:documentation>
                Container for the security domain definitions.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="domain" type="domainType" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="domainType">
        <xs:annotation>
            <xs:documentation>
                Complex type for the definition of a single security domain.
                
                A domain requires a minimum of one realm and the first realm in the list is used as the default realm.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="realm" type="realmRefType" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="realmRefType">
        <xs:annotation>
            <xs:documentation>
                A reference to a security realm.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="realmsType">
        <xs:annotation>
            <xs:documentation>
                Container for the security realm definitions.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="realm" type="realmType" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="realmType">
        <xs:annotation>
            <xs:documentation>
                Complex type for the definition of a single security realm.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:string" use="required" />
    </xs:complexType>

    <!-- 
        TLS Components
     -->

    <xs:complexType name="tlsType">
        <xs:annotation>
            <xs:documentation>
                Complex type to contain the definitions of the various components needed
                for SSL, the end result being that these components can be combined together to
                create a fully defined SSLContext.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="keystores" type="keyStoresType" minOccurs="0" />
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="keyStoresType">
        <xs:annotation>
            <xs:documentation>
                Container for the KeyStore definitions.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="keystore" type="keyStoreType" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="keyStoreType">
        <xs:annotation>
            <xs:documentation>
                An individual names KeyStore definition.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="file" type="fileType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The location of the file to use to initialise the KeyStore instance.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required" />
        <xs:attribute name="type" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    The KeyStore type, e.g. jks, pkcs#12.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="provider" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    The name of the provider to use to
                    instantiate the KeyStore, if the provider is not
                    specified then the first provider found that can
                    create an instance of the specified 'type' will be
                    used.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="provider-loader" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    The name of the provider-loader defined within the subsystem to obtain the Providers
                    to search for the one that can create the required KeyStore type.

                    If this is not specified then the global list of Providers is used instead.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="password" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    The password to use when initialising / loading the KeyStore.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <!-- 
        General Types
     -->

    <xs:complexType name="fileType">
        <xs:annotation>
            <xs:documentation>
                A reference to a file.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="relative-to" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    A reference to a previously defined path that the file name is
                    relative to.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="path" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    The remaining path to the file referenced.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="read-only" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    When set to 'true' this attribute prevents the in-memory representation
                    of the file from being written back to the file.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="required" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    It is possible that a KeyStore definition can be created to a non-existent file and
                    the file be automatically created when the store is saved, however no error will be reported 
                    where the file does not exist to begin with.
                    
                    If the intent is that the store will always exist in advance set this to 'true' so that an error
                    will be reported if the file is missing.  
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:simpleType name="stringListType">
        <xs:annotation>
            <xs:documentation>A list of String.</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:string"/>
    </xs:simpleType>

</xs:schema>

